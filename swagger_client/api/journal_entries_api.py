# coding: utf-8

"""
    Accounting API

    A flexible API for pulling accounting data, normalized and aggregated from 20 accounting integrations.  Standardize how you connect to your customers’ accounting software. View, create, update, and delete data in the same way for all the leading accounting platforms.  [Read more...](https://docs.codat.io/accounting-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)      # noqa: E501

    OpenAPI spec version: 2.1.0
    Contact: support@codat.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class JournalEntriesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_journal_entry(self, **kwargs):  # noqa: E501
        """Create journal entry  # noqa: E501

        Posts a new journalEntry to the accounting package for a given company.  Required data may vary by integration. To see what data to post, first call [Get create journal entry model](https://docs.codat.io/accounting-api#/operations/get-create-journalEntries-model).  Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journalEntries) to see which integrations support this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_journal_entry(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param object timeout_in_minutes:
        :return: CreateJournalEntryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_journal_entry_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_journal_entry_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_journal_entry_with_http_info(self, **kwargs):  # noqa: E501
        """Create journal entry  # noqa: E501

        Posts a new journalEntry to the accounting package for a given company.  Required data may vary by integration. To see what data to post, first call [Get create journal entry model](https://docs.codat.io/accounting-api#/operations/get-create-journalEntries-model).  Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journalEntries) to see which integrations support this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_journal_entry_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param object timeout_in_minutes:
        :return: CreateJournalEntryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'timeout_in_minutes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_journal_entry" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'timeout_in_minutes' in params:
            query_params.append(('timeoutInMinutes', params['timeout_in_minutes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth_header']  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/connections/{connectionId}/push/journalEntries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateJournalEntryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_journal_entry(self, **kwargs):  # noqa: E501
        """Delete journal entry  # noqa: E501

        ﻿> **Use with caution** > >Because Journal Entries underpin every transaction in an accounting platform, deleting a Journal Entry can affect every transaction for a given company. >  > **Before you proceed, make sure you understand the implications of deleting Journal Entries from an accounting perspective.**  The _Delete Journal entries_ endpoint allows you to delete a specified Journal entry from an accounting platform.  ### Process 1. Pass the `{journalEntryId}` to the _Delete Journal Entries_ endpoint and store the `pushOperationKey` returned. 2. Check the status of the delete by checking the status of push operation either via    1. [Push operation webhook](/introduction/webhooks/core-rules-types#push-operation-status-has-changed) (advised),    2. [Push operation status endpoint](https://docs.codat.io/codat-api#/operations/get-push-operation).         A `Success` status indicates that the Journal Entry object was deleted from the accounting platform. 3. (Optional) Check that the Journal Entry was deleted from the accounting platform.  ### Effect on related objects  Be aware that deleting a Journal Entry from an accounting platform might cause related objects to be modified. For example, if you delete the Journal Entry for a paid invoice in QuickBooks Online, the invoice is deleted but the payment against that invoice is not. The payment is converted to a payment on account.  ## Integration specifics Integrations that support soft delete do not permanently delete the object in the accounting platform.  | Integration | Soft Deleted |  |-------------|--------------| | QuickBooks Online | Yes    |         > **Supported Integrations** >  > This functionality is currently only supported for our QuickBooks Online integration. Check out our [public roadmap](https://portal.productboard.com/codat/7-public-product-roadmap/tabs/46-accounting-api) to see what we're building next, and to submit ideas for new features.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_journal_entry(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PushOperationSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_journal_entry_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_journal_entry_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_journal_entry_with_http_info(self, **kwargs):  # noqa: E501
        """Delete journal entry  # noqa: E501

        ﻿> **Use with caution** > >Because Journal Entries underpin every transaction in an accounting platform, deleting a Journal Entry can affect every transaction for a given company. >  > **Before you proceed, make sure you understand the implications of deleting Journal Entries from an accounting perspective.**  The _Delete Journal entries_ endpoint allows you to delete a specified Journal entry from an accounting platform.  ### Process 1. Pass the `{journalEntryId}` to the _Delete Journal Entries_ endpoint and store the `pushOperationKey` returned. 2. Check the status of the delete by checking the status of push operation either via    1. [Push operation webhook](/introduction/webhooks/core-rules-types#push-operation-status-has-changed) (advised),    2. [Push operation status endpoint](https://docs.codat.io/codat-api#/operations/get-push-operation).         A `Success` status indicates that the Journal Entry object was deleted from the accounting platform. 3. (Optional) Check that the Journal Entry was deleted from the accounting platform.  ### Effect on related objects  Be aware that deleting a Journal Entry from an accounting platform might cause related objects to be modified. For example, if you delete the Journal Entry for a paid invoice in QuickBooks Online, the invoice is deleted but the payment against that invoice is not. The payment is converted to a payment on account.  ## Integration specifics Integrations that support soft delete do not permanently delete the object in the accounting platform.  | Integration | Soft Deleted |  |-------------|--------------| | QuickBooks Online | Yes    |         > **Supported Integrations** >  > This functionality is currently only supported for our QuickBooks Online integration. Check out our [public roadmap](https://portal.productboard.com/codat/7-public-product-roadmap/tabs/46-accounting-api) to see what we're building next, and to submit ideas for new features.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_journal_entry_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PushOperationSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_journal_entry" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth_header']  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/connections/{connectionId}/push/journalEntries/{journalEntryId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PushOperationSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_create_journal_entries_model(self, **kwargs):  # noqa: E501
        """Get create journal entry model  # noqa: E501

        ﻿Get create journal entry model. Returns the expected data for the request payload.  See the examples for integration-specific indicative models.  > **Supported Integrations** >  > Check out our [Knowledge UI](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journalEntries) for integrations that support creating journal entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_create_journal_entries_model(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PushOption
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_create_journal_entries_model_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_create_journal_entries_model_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_create_journal_entries_model_with_http_info(self, **kwargs):  # noqa: E501
        """Get create journal entry model  # noqa: E501

        ﻿Get create journal entry model. Returns the expected data for the request payload.  See the examples for integration-specific indicative models.  > **Supported Integrations** >  > Check out our [Knowledge UI](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journalEntries) for integrations that support creating journal entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_create_journal_entries_model_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PushOption
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_create_journal_entries_model" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth_header']  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/connections/{connectionId}/options/journalEntries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PushOption',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_journal_entry(self, journal_entry_id, company_id, **kwargs):  # noqa: E501
        """Get journal entry  # noqa: E501

        Gets a single JournalEntry corresponding to the given ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_journal_entry(journal_entry_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object journal_entry_id: (required)
        :param object company_id: (required)
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_journal_entry_with_http_info(journal_entry_id, company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_journal_entry_with_http_info(journal_entry_id, company_id, **kwargs)  # noqa: E501
            return data

    def get_journal_entry_with_http_info(self, journal_entry_id, company_id, **kwargs):  # noqa: E501
        """Get journal entry  # noqa: E501

        Gets a single JournalEntry corresponding to the given ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_journal_entry_with_http_info(journal_entry_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object journal_entry_id: (required)
        :param object company_id: (required)
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['journal_entry_id', 'company_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_journal_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'journal_entry_id' is set
        if ('journal_entry_id' not in params or
                params['journal_entry_id'] is None):
            raise ValueError("Missing the required parameter `journal_entry_id` when calling `get_journal_entry`")  # noqa: E501
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `get_journal_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'journal_entry_id' in params:
            path_params['journalEntryId'] = params['journal_entry_id']  # noqa: E501
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth_header']  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/data/journalEntries/{journalEntryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JournalEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_journal_entries(self, **kwargs):  # noqa: E501
        """List journal entries  # noqa: E501

        ﻿Gets the latest journal entries for a company, with pagination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_journal_entries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object page: Page number. [Read more](https://docs.codat.io/using-the-api/paging).
        :param object page_size: Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
        :param object query: Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
        :param object order_by: Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
        :return: JournalEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_journal_entries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_journal_entries_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_journal_entries_with_http_info(self, **kwargs):  # noqa: E501
        """List journal entries  # noqa: E501

        ﻿Gets the latest journal entries for a company, with pagination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_journal_entries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object page: Page number. [Read more](https://docs.codat.io/using-the-api/paging).
        :param object page_size: Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
        :param object query: Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
        :param object order_by: Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
        :return: JournalEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'query', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_journal_entries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth_header']  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/data/journalEntries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JournalEntries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
