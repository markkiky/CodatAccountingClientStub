# coding: utf-8

"""
    Accounting API

    A flexible API for pulling accounting data, normalized and aggregated from 20 accounting integrations.  Standardize how you connect to your customersâ€™ accounting software. View, create, update, and delete data in the same way for all the leading accounting platforms.  [Read more...](https://docs.codat.io/accounting-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)      # noqa: E501

    OpenAPI spec version: 2.1.0
    Contact: support@codat.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ReportsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_aged_creditors_report(self, **kwargs):  # noqa: E501
        """Aged creditors report  # noqa: E501

        Returns aged creditors report for company that shows the total balance owed by a business to its suppliers over time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aged_creditors_report(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object report_date: Date the report is generated up to.
        :param object number_of_periods: Number of periods to include in the report.
        :param object period_length_days: The length of period in days.
        :return: AgedCreditorReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aged_creditors_report_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_aged_creditors_report_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_aged_creditors_report_with_http_info(self, **kwargs):  # noqa: E501
        """Aged creditors report  # noqa: E501

        Returns aged creditors report for company that shows the total balance owed by a business to its suppliers over time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aged_creditors_report_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object report_date: Date the report is generated up to.
        :param object number_of_periods: Number of periods to include in the report.
        :param object period_length_days: The length of period in days.
        :return: AgedCreditorReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['report_date', 'number_of_periods', 'period_length_days']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aged_creditors_report" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'report_date' in params:
            query_params.append(('reportDate', params['report_date']))  # noqa: E501
        if 'number_of_periods' in params:
            query_params.append(('numberOfPeriods', params['number_of_periods']))  # noqa: E501
        if 'period_length_days' in params:
            query_params.append(('periodLengthDays', params['period_length_days']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth_header']  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/reports/agedCreditor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgedCreditorReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aged_debtors_report(self, **kwargs):  # noqa: E501
        """Aged debtors report  # noqa: E501

        Returns aged debtors report for company that shows the total outstanding balance due from customers to the business over time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aged_debtors_report(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object report_date: Date the report is generated up to.
        :param object number_of_periods: Number of periods to include in the report.
        :param object period_length_days: The length of period in days.
        :return: AgedDebtorReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aged_debtors_report_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_aged_debtors_report_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_aged_debtors_report_with_http_info(self, **kwargs):  # noqa: E501
        """Aged debtors report  # noqa: E501

        Returns aged debtors report for company that shows the total outstanding balance due from customers to the business over time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aged_debtors_report_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object report_date: Date the report is generated up to.
        :param object number_of_periods: Number of periods to include in the report.
        :param object period_length_days: The length of period in days.
        :return: AgedDebtorReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['report_date', 'number_of_periods', 'period_length_days']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aged_debtors_report" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'report_date' in params:
            query_params.append(('reportDate', params['report_date']))  # noqa: E501
        if 'number_of_periods' in params:
            query_params.append(('numberOfPeriods', params['number_of_periods']))  # noqa: E501
        if 'period_length_days' in params:
            query_params.append(('periodLengthDays', params['period_length_days']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth_header']  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/reports/agedDebtor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgedDebtorReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_balance_sheet(self, period_length, periods_to_compare, **kwargs):  # noqa: E501
        """Get balance sheet  # noqa: E501

        Gets the latest balance sheet for a company.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_balance_sheet(period_length, periods_to_compare, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object period_length: Number of months defining the period of interest. (required)
        :param object periods_to_compare: Number of periods with `periodLength` to compare. (required)
        :param datetime start_month:
        :return: BalanceSheet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_balance_sheet_with_http_info(period_length, periods_to_compare, **kwargs)  # noqa: E501
        else:
            (data) = self.get_balance_sheet_with_http_info(period_length, periods_to_compare, **kwargs)  # noqa: E501
            return data

    def get_balance_sheet_with_http_info(self, period_length, periods_to_compare, **kwargs):  # noqa: E501
        """Get balance sheet  # noqa: E501

        Gets the latest balance sheet for a company.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_balance_sheet_with_http_info(period_length, periods_to_compare, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object period_length: Number of months defining the period of interest. (required)
        :param object periods_to_compare: Number of periods with `periodLength` to compare. (required)
        :param datetime start_month:
        :return: BalanceSheet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['period_length', 'periods_to_compare', 'start_month']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_balance_sheet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'period_length' is set
        if ('period_length' not in params or
                params['period_length'] is None):
            raise ValueError("Missing the required parameter `period_length` when calling `get_balance_sheet`")  # noqa: E501
        # verify the required parameter 'periods_to_compare' is set
        if ('periods_to_compare' not in params or
                params['periods_to_compare'] is None):
            raise ValueError("Missing the required parameter `periods_to_compare` when calling `get_balance_sheet`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'period_length' in params:
            query_params.append(('periodLength', params['period_length']))  # noqa: E501
        if 'periods_to_compare' in params:
            query_params.append(('periodsToCompare', params['periods_to_compare']))  # noqa: E501
        if 'start_month' in params:
            query_params.append(('startMonth', params['start_month']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth_header']  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/data/financials/balanceSheet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BalanceSheet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cash_flow_statement(self, period_length, periods_to_compare, **kwargs):  # noqa: E501
        """Get cash flow statement  # noqa: E501

        Gets the latest cash flow statement for a company.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cash_flow_statement(period_length, periods_to_compare, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object period_length: Number of months defining the period of interest. (required)
        :param object periods_to_compare: Number of periods with `periodLength` to compare. (required)
        :param datetime start_month:
        :return: CashFlowStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cash_flow_statement_with_http_info(period_length, periods_to_compare, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cash_flow_statement_with_http_info(period_length, periods_to_compare, **kwargs)  # noqa: E501
            return data

    def get_cash_flow_statement_with_http_info(self, period_length, periods_to_compare, **kwargs):  # noqa: E501
        """Get cash flow statement  # noqa: E501

        Gets the latest cash flow statement for a company.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cash_flow_statement_with_http_info(period_length, periods_to_compare, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object period_length: Number of months defining the period of interest. (required)
        :param object periods_to_compare: Number of periods with `periodLength` to compare. (required)
        :param datetime start_month:
        :return: CashFlowStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['period_length', 'periods_to_compare', 'start_month']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cash_flow_statement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'period_length' is set
        if ('period_length' not in params or
                params['period_length'] is None):
            raise ValueError("Missing the required parameter `period_length` when calling `get_cash_flow_statement`")  # noqa: E501
        # verify the required parameter 'periods_to_compare' is set
        if ('periods_to_compare' not in params or
                params['periods_to_compare'] is None):
            raise ValueError("Missing the required parameter `periods_to_compare` when calling `get_cash_flow_statement`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'period_length' in params:
            query_params.append(('periodLength', params['period_length']))  # noqa: E501
        if 'periods_to_compare' in params:
            query_params.append(('periodsToCompare', params['periods_to_compare']))  # noqa: E501
        if 'start_month' in params:
            query_params.append(('startMonth', params['start_month']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth_header']  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/data/financials/cashFlowStatement', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CashFlowStatement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_profit_and_loss(self, period_length, periods_to_compare, **kwargs):  # noqa: E501
        """Get profit and loss  # noqa: E501

        Gets the latest profit and loss for a company.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profit_and_loss(period_length, periods_to_compare, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object period_length: Number of months defining the period of interest. (required)
        :param object periods_to_compare: Number of periods with `periodLength` to compare. (required)
        :param datetime start_month:
        :return: ProfitAndLossReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_profit_and_loss_with_http_info(period_length, periods_to_compare, **kwargs)  # noqa: E501
        else:
            (data) = self.get_profit_and_loss_with_http_info(period_length, periods_to_compare, **kwargs)  # noqa: E501
            return data

    def get_profit_and_loss_with_http_info(self, period_length, periods_to_compare, **kwargs):  # noqa: E501
        """Get profit and loss  # noqa: E501

        Gets the latest profit and loss for a company.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profit_and_loss_with_http_info(period_length, periods_to_compare, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object period_length: Number of months defining the period of interest. (required)
        :param object periods_to_compare: Number of periods with `periodLength` to compare. (required)
        :param datetime start_month:
        :return: ProfitAndLossReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['period_length', 'periods_to_compare', 'start_month']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_profit_and_loss" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'period_length' is set
        if ('period_length' not in params or
                params['period_length'] is None):
            raise ValueError("Missing the required parameter `period_length` when calling `get_profit_and_loss`")  # noqa: E501
        # verify the required parameter 'periods_to_compare' is set
        if ('periods_to_compare' not in params or
                params['periods_to_compare'] is None):
            raise ValueError("Missing the required parameter `periods_to_compare` when calling `get_profit_and_loss`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'period_length' in params:
            query_params.append(('periodLength', params['period_length']))  # noqa: E501
        if 'periods_to_compare' in params:
            query_params.append(('periodsToCompare', params['periods_to_compare']))  # noqa: E501
        if 'start_month' in params:
            query_params.append(('startMonth', params['start_month']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth_header']  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/data/financials/profitAndLoss', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfitAndLossReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def is_aged_creditors_report_available(self, **kwargs):  # noqa: E501
        """Aged creditors report available  # noqa: E501

        Indicates whether the aged creditor report is available for the company.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.is_aged_creditors_report_available(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.is_aged_creditors_report_available_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.is_aged_creditors_report_available_with_http_info(**kwargs)  # noqa: E501
            return data

    def is_aged_creditors_report_available_with_http_info(self, **kwargs):  # noqa: E501
        """Aged creditors report available  # noqa: E501

        Indicates whether the aged creditor report is available for the company.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.is_aged_creditors_report_available_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method is_aged_creditors_report_available" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth_header']  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/reports/agedCreditor/available', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def is_aged_debtor_report_available(self, **kwargs):  # noqa: E501
        """Aged debtors report available  # noqa: E501

        Indicates whether the aged debtor report is available for the company.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.is_aged_debtor_report_available(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.is_aged_debtor_report_available_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.is_aged_debtor_report_available_with_http_info(**kwargs)  # noqa: E501
            return data

    def is_aged_debtor_report_available_with_http_info(self, **kwargs):  # noqa: E501
        """Aged debtors report available  # noqa: E501

        Indicates whether the aged debtor report is available for the company.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.is_aged_debtor_report_available_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method is_aged_debtor_report_available" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth_header']  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/reports/agedDebtor/available', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
