# coding: utf-8

"""
    Accounting API

    A flexible API for pulling accounting data, normalized and aggregated from 20 accounting integrations.  Standardize how you connect to your customersâ€™ accounting software. View, create, update, and delete data in the same way for all the leading accounting platforms.  [Read more...](https://docs.codat.io/accounting-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)      # noqa: E501

    OpenAPI spec version: 2.1.0
    Contact: support@codat.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValidDataTypeLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_property': 'object',
        'links': 'object'
    }

    attribute_map = {
        '_property': 'property',
        'links': 'links'
    }

    def __init__(self, _property=None, links=None):  # noqa: E501
        """ValidDataTypeLinks - a model defined in Swagger"""  # noqa: E501
        self.__property = None
        self._links = None
        self.discriminator = None
        if _property is not None:
            self._property = _property
        if links is not None:
            self.links = links

    @property
    def _property(self):
        """Gets the _property of this ValidDataTypeLinks.  # noqa: E501

        The property from the account that can be linked.  # noqa: E501

        :return: The _property of this ValidDataTypeLinks.  # noqa: E501
        :rtype: object
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this ValidDataTypeLinks.

        The property from the account that can be linked.  # noqa: E501

        :param _property: The _property of this ValidDataTypeLinks.  # noqa: E501
        :type: object
        """

        self.__property = _property

    @property
    def links(self):
        """Gets the links of this ValidDataTypeLinks.  # noqa: E501

        Supported `dataTypes` that the record can be linked to.  # noqa: E501

        :return: The links of this ValidDataTypeLinks.  # noqa: E501
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ValidDataTypeLinks.

        Supported `dataTypes` that the record can be linked to.  # noqa: E501

        :param links: The links of this ValidDataTypeLinks.  # noqa: E501
        :type: object
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidDataTypeLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidDataTypeLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
